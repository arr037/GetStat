<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Threading;

namespace DotNetKit.Misc.Disposables
{
<#
for (var count = 2; count <= 4; count++)
{
    var typeName = string.Concat("Tuple", count, "Disposable");
    var itemNames = Enumerable.Range(1, count).Select(i => string.Concat("disposable", i)).ToArray();
    var nameList = string.Join(", ", itemNames);
    var parameterList = string.Join(", ", itemNames.Select(name => "IDisposable " + name));
#>
    sealed class <#= typeName #>
        : IBooleanDisposable
    {
        IDisposable <#= nameList #>;

        public bool IsDisposed => disposable1 == null;

        public bool TryDispose()
        {
<#
    for (var i = 0; i < itemNames.Length; i++)
    {
        var itemName = itemNames[i];
        if (i == 0)
        {
#>
            var d = Interlocked.Exchange(ref <#= itemName #>, null);
            if (d == null) return false;
            d.Dispose();

<#
        }
        else
        {
#>
            <#= itemName #>.Dispose();
<#
        }
    }
#>
            return true;
        }

        public void Dispose()
        {
            TryDispose();
        }

        public <#= typeName #>(<#= parameterList #>)
        {
<#
    foreach (var itemName in itemNames)
    {
#>
            this.<#= itemName #> = <#= itemName #>;
<#
    }
#>
        }
    }

    public partial class ImmutableCompositeDisposable
    {
        /// <summary>
        /// Creates a composite disposable to own the specified disposables.
        /// </summary>
        /// <exception cref="ArgumentNullException" />
        public static IBooleanDisposable Create(<#= parameterList #>)
        {
<#
    foreach (var itemName in itemNames)
    {
#>
            if (<#= itemName #> == null) throw new ArgumentNullException(nameof(<#= itemName #>));
<#
    }
#>
            return new <#= typeName #>(<#= nameList #>);
        }
    }

<#
}
#>
}
